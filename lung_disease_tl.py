# -*- coding: utf-8 -*-
"""lung disease TL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nk2qFgoL32h7QKGasZX0Osa07QzFbmNh
"""

pip install split-folders

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d fatemehmehrparvar/lung-disease

import zipfile
zip_ref=zipfile.ZipFile('/content/lung-disease.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import splitfolders
import os
path = '/content/Lung X-Ray Image/Lung X-Ray Image'
print(os.listdir(path))

path = '/content/Lung X-Ray Image/Lung X-Ray Image'
splitfolders.ratio(path,seed=1337, output="Chess-Splitted", ratio=(0.6, 0.2, 0.2))

import tensorflow as tf
import keras
from keras import layers
from keras.layers import Dense,Dropout,Conv2D,MaxPooling2D,Flatten
from keras import Sequential
from tensorflow.keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.applications.vgg16 import VGG16

train_dg=ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    shear_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True
)
test_dg=ImageDataGenerator(
    rescale=1./255,
)
val_dg=ImageDataGenerator(
    rescale=1./255
)

train_ds=train_dg.flow_from_directory(
    directory='/content/Chess-Splitted/train',
    target_size=(200,200),
    class_mode='categorical'
)

test_ds=test_dg.flow_from_directory(
    directory='/content/Chess-Splitted/test',
    target_size=(200,2000),
    class_mode='categorical'
)

val_ds=val_dg.flow_from_directory(
    directory='/content/Chess-Splitted/val',
    target_size=(200,200),
    class_mode='categorical'
)

"""## **VGG16**"""

conv_base=VGG16(
    weights='imagenet',
    include_top=False,
    input_shape=(200,200,3)
)

conv_trainable=True
set_trainable=False

for layer in conv_base.layers:
  if layer.name=='block5_conv1':
    set_trainable=True
  if set_trainable:
    layer.trainable=True
  else:
    layer.trainable=False

for layer in conv_base.layers:
  print(layer.name,layer.trainable)

conv_base.summary()

model=Sequential()

model.add(conv_base)
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(3,activation='sigmoid'))

model.summary()

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

history=model.fit(train_ds,epochs=15,batch_size=128,validation_data=val_ds)

import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
plt.subplot(1,2,1)
plt.plot(history.history['loss'],label='loss')
plt.plot(history.history['val_loss'],label='val_loss')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['accuracy'],label='accuarcy')
plt.plot(history.history['val_accuracy'],label='val_accuracy')
plt.legend()
plt.plot()

